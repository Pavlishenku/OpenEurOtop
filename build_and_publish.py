#!/usr/bin/env python
"""
Script de build et publication pour OpenEurOtop

Usage:
    python build_and_publish.py check       # V√©rifier le package
    python build_and_publish.py build       # Construire le package
    python build_and_publish.py test        # Publier sur Test PyPI
    python build_and_publish.py publish     # Publier sur PyPI (production)
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path


def run_command(cmd, check=True):
    """Ex√©cute une commande shell et affiche le r√©sultat"""
    print(f"\nüîß Ex√©cution : {cmd}")
    print("-" * 60)
    result = subprocess.run(cmd, shell=True, check=check)
    return result.returncode == 0


def clean():
    """Nettoie les fichiers de build pr√©c√©dents"""
    print("\nüßπ Nettoyage des fichiers de build...")
    dirs_to_clean = ['build', 'dist', 'openeurotop.egg-info', 'htmlcov', '.pytest_cache']
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            print(f"   ‚úì Supprim√© : {dir_name}/")
    
    # Nettoyer les fichiers __pycache__
    for pycache in Path('.').rglob('__pycache__'):
        shutil.rmtree(pycache)
    
    print("   ‚úì Nettoyage termin√©")


def check():
    """V√©rifie que le package est pr√™t pour publication"""
    print("\nüîç V√©rification du package...")
    
    checks = []
    
    # 1. V√©rifier que les tests passent
    print("\n1Ô∏è‚É£ Ex√©cution des tests...")
    if run_command("pytest tests/ -v", check=False):
        checks.append(("Tests unitaires", True))
    else:
        checks.append(("Tests unitaires", False))
    
    # 2. V√©rifier la qualit√© du code
    print("\n2Ô∏è‚É£ V√©rification du code avec flake8...")
    if run_command("flake8 openeurotop --count --select=E9,F63,F7,F82 --show-source --statistics", check=False):
        checks.append(("Qualit√© du code", True))
    else:
        checks.append(("Qualit√© du code", False))
    
    # 3. V√©rifier que les fichiers importants existent
    print("\n3Ô∏è‚É£ V√©rification des fichiers essentiels...")
    required_files = [
        'README.md',
        'LICENSE',
        'CHANGELOG.md',
        'setup.py',
        'pyproject.toml',
        'requirements.txt',
        'MANIFEST.in',
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if not missing_files:
        checks.append(("Fichiers essentiels", True))
    else:
        print(f"   ‚ùå Fichiers manquants : {', '.join(missing_files)}")
        checks.append(("Fichiers essentiels", False))
    
    # 4. V√©rifier que la version est coh√©rente
    print("\n4Ô∏è‚É£ V√©rification de la version...")
    version_ok = True
    try:
        with open('setup.py') as f:
            setup_content = f.read()
            if 'version="1.0.0"' not in setup_content:
                print("   ‚ö†Ô∏è  Version dans setup.py n'est pas 1.0.0")
                version_ok = False
        
        with open('pyproject.toml') as f:
            toml_content = f.read()
            if 'version = "1.0.0"' not in toml_content:
                print("   ‚ö†Ô∏è  Version dans pyproject.toml n'est pas 1.0.0")
                version_ok = False
        
        checks.append(("Coh√©rence version", version_ok))
    except Exception as e:
        print(f"   ‚ùå Erreur : {e}")
        checks.append(("Coh√©rence version", False))
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES V√âRIFICATIONS")
    print("=" * 60)
    for name, status in checks:
        icon = "‚úÖ" if status else "‚ùå"
        print(f"{icon} {name}")
    
    all_passed = all(status for _, status in checks)
    
    if all_passed:
        print("\nüéâ Toutes les v√©rifications sont pass√©es !")
        print("   Vous pouvez proc√©der au build avec : python build_and_publish.py build")
        return True
    else:
        print("\n‚ö†Ô∏è  Certaines v√©rifications ont √©chou√©.")
        print("   Veuillez corriger les erreurs avant de continuer.")
        return False


def build():
    """Construit le package"""
    print("\nüì¶ Construction du package...")
    
    clean()
    
    if not run_command("python -m build"):
        print("\n‚ùå Erreur lors du build")
        return False
    
    print("\n‚úÖ Build termin√© avec succ√®s")
    
    # V√©rifier le package
    print("\nüîç V√©rification du package construit...")
    if not run_command("twine check dist/*"):
        print("\n‚ùå Le package a des erreurs")
        return False
    
    # Afficher le contenu
    print("\nüìÑ Contenu du package :")
    run_command("tar -tzf dist/openeurotop-1.0.0.tar.gz", check=False)
    
    print("\n‚úÖ Package pr√™t pour publication !")
    print("   - Test PyPI : python build_and_publish.py test")
    print("   - PyPI Prod : python build_and_publish.py publish")
    
    return True


def test_publish():
    """Publie sur Test PyPI"""
    print("\nüöÄ Publication sur Test PyPI...")
    
    if not os.path.exists('dist'):
        print("‚ùå Le dossier dist/ n'existe pas.")
        print("   Ex√©cutez d'abord : python build_and_publish.py build")
        return False
    
    print("\n‚ö†Ô∏è  Vous allez publier sur Test PyPI")
    response = input("Continuer ? (o/N) : ")
    if response.lower() != 'o':
        print("Publication annul√©e")
        return False
    
    if run_command("twine upload --repository testpypi dist/*", check=False):
        print("\n‚úÖ Publication sur Test PyPI r√©ussie !")
        print("\nüì• Pour tester l'installation :")
        print("   pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ openeurotop")
        return True
    else:
        print("\n‚ùå Erreur lors de la publication")
        return False


def publish():
    """Publie sur PyPI production"""
    print("\nüöÄ Publication sur PyPI PRODUCTION...")
    
    if not os.path.exists('dist'):
        print("‚ùå Le dossier dist/ n'existe pas.")
        print("   Ex√©cutez d'abord : python build_and_publish.py build")
        return False
    
    print("\n" + "‚ö†Ô∏è " * 20)
    print("ATTENTION : Vous allez publier sur PyPI PRODUCTION")
    print("Cette action est IRR√âVERSIBLE !")
    print("Assurez-vous que :")
    print("  - Tous les tests passent")
    print("  - La documentation est √† jour")
    print("  - Le CHANGELOG est complet")
    print("  - Le package a √©t√© test√© sur Test PyPI")
    print("‚ö†Ô∏è " * 20 + "\n")
    
    response = input("Taper 'PUBLIER' pour continuer : ")
    if response != 'PUBLIER':
        print("Publication annul√©e")
        return False
    
    if run_command("twine upload dist/*", check=False):
        print("\nüéâ Publication sur PyPI r√©ussie !")
        print("\nüì• Pour installer :")
        print("   pip install openeurotop")
        print("\nüåê Lien PyPI :")
        print("   https://pypi.org/project/openeurotop/")
        return True
    else:
        print("\n‚ùå Erreur lors de la publication")
        return False


def main():
    """Point d'entr√©e principal"""
    if len(sys.argv) < 2:
        print(__doc__)
        return
    
    command = sys.argv[1].lower()
    
    commands = {
        'check': check,
        'build': build,
        'test': test_publish,
        'publish': publish,
        'clean': clean,
    }
    
    if command not in commands:
        print(f"‚ùå Commande inconnue : {command}")
        print(__doc__)
        return
    
    commands[command]()


if __name__ == '__main__':
    main()

